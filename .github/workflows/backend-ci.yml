name: Backend CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/tests/requirements-test.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/requirements-test.txt

      - name: Create scripts directory
        run: |
          mkdir -p .github/workflows/scripts

      - name: Run tests with coverage
        env:
          DATABASE_URL: sqlite:///./test_hockey_players.db
        run: |
          cd backend
          python -m pytest tests/ --cov=app --cov-report=html --cov-report=xml --cov-report=term-missing -v

      - name: Check coverage threshold
        run: |
          python .github/workflows/scripts/check_coverage.py

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            backend/htmlcov/
            backend/coverage.xml
          retention-days: 30

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        env:
          DATABASE_URL: sqlite:///./test_hockey_players.db
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Run safety check for known vulnerabilities
        run: |
          cd backend
          safety check --json --output safety-report.json || true
          echo "Safety scan completed - check artifacts for details"

      - name: Run bandit security scan
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-report.json || true
          echo "Bandit security scan completed - check artifacts for details"

      - name: Check for critical security issues
        run: |
          python .github/workflows/scripts/check_security.py

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/safety-report.json
            backend/bandit-report.json
          retention-days: 30

  dependency-check:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Run dependency vulnerability scan
        run: |
          cd backend
          pip-audit --format=json --output=pip-audit-report.json --requirement=requirements.txt || true
          echo "Dependency vulnerability scan completed"

      - name: Check for high-severity dependency issues
        run: |
          python .github/workflows/scripts/check_dependencies.py

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-reports
          path: backend/pip-audit-report.json
          retention-days: 30
