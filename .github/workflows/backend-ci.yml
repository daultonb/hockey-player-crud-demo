name: Backend CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-test.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run tests with coverage
        run: |
          cd backend
          python -m pytest tests/ --cov=app --cov-report=html --cov-report=xml --cov-report=term-missing -v

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            backend/htmlcov/
            backend/coverage.xml
          retention-days: 30

      - name: Display coverage summary
        run: |
          cd backend
          python -m pytest tests/ --cov=app --cov-report=term

      - name: Check coverage threshold
        run: |
          cd backend
          python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage = float(root.attrib['line-rate']) * 100
          print(f'Total coverage: {coverage:.1f}%')
          if coverage < 95.0:
              print(f'❌ Coverage {coverage:.1f}% is below 95% threshold')
              exit(1)
          else:
              print(f'✅ Coverage {coverage:.1f}% meets threshold')
          "

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Run safety check for known vulnerabilities
        run: |
          cd backend
          safety check --json --output safety-report.json || true
          echo "Safety scan completed - check artifacts for details"

      - name: Run bandit security scan
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-report.json || true
          echo "Bandit security scan completed - check artifacts for details"

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            backend/safety-report.json
            backend/bandit-report.json
          retention-days: 30

      - name: Check for critical security issues
        run: |
          cd backend
          echo "Checking for critical security vulnerabilities..."

          # Check safety results for critical issues
          if [ -f safety-report.json ]; then
            python -c "
            import json
            try:
                with open('safety-report.json', 'r') as f:
                    data = json.load(f)
                if isinstance(data, list) and len(data) > 0:
                    critical_issues = [issue for issue in data if issue.get('vulnerability', {}).get('severity', '').lower() in ['critical', 'high']]
                    if critical_issues:
                        print(f'❌ Found {len(critical_issues)} critical/high severity vulnerabilities')
                        for issue in critical_issues[:3]:  # Show first 3
                            print(f\"  - {issue.get('package', 'Unknown')}: {issue.get('vulnerability', {}).get('summary', 'No summary')}\")
                        exit(1)
                    else:
                        print('✅ No critical security vulnerabilities found')
                else:
                    print('✅ No security vulnerabilities detected')
            except:
                print('⚠️  Could not parse safety report, but scan completed')
            "
          fi

          echo "Security checks completed successfully"

  dependency-check:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Run dependency vulnerability scan
        run: |
          cd backend
          pip-audit --format=json --output=pip-audit-report.json --requirement=requirements.txt || true
          echo "Dependency vulnerability scan completed"

      - name: Upload dependency reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-reports
          path: backend/pip-audit-report.json
          retention-days: 30

      - name: Check for high-severity dependency issues
        run: |
          cd backend
          if [ -f pip-audit-report.json ]; then
            echo "Checking for critical dependency vulnerabilities..."
            python -c "
            import json
            try:
                with open('pip-audit-report.json', 'r') as f:
                    data = json.load(f)
                
                vulnerabilities = data.get('vulnerabilities', [])
                if vulnerabilities:
                    high_severity = [v for v in vulnerabilities if v.get('severity', '').lower() in ['critical', 'high']]
                    if high_severity:
                        print(f'❌ Found {len(high_severity)} high-severity dependency vulnerabilities')
                        for vuln in high_severity[:3]:  # Show first 3
                            package = vuln.get('package', 'Unknown')
                            summary = vuln.get('summary', 'No summary')
                            print(f'  - {package}: {summary}')
                        exit(1)
                    else:
                        print(f'✅ Found {len(vulnerabilities)} low-severity issues (acceptable)')
                else:
                    print('✅ No dependency vulnerabilities found')
            except Exception as e:
                print(f'⚠️  Could not parse dependency report: {e}')
                print('Dependency scan completed but results unclear')
            "
          else
            echo "✅ No dependency report generated (likely no vulnerabilities)"
          fi
